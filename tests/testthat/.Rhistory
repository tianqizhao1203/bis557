#' Fit a linear model
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
devtools::test()
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
devtools::test()
devtools::test(linear-models.r)
devtools::test(linear_models)
devtools::test()
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
if (det(t(xm)%*%xm) == 0) {
beta <- "singular"
class(beta) <- c("lm")
return(beta[])
} else {
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
}
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
if (det(t(xm)%*%xm) == 0) {
beta <- "singular"
class(beta) <- c("lm")
return(beta[])
} else {
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
}
linear_model(Sepal.Length ~., iris)
linear_model(Sepal.Length ~., iris)
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
ridge_train <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_train.csv")
ridge_test <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_test.csv")
ridge_reg <- function(formula, data, lambda){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
data <- ridge_train
formula <- y ~.
lambda <- 1.2121212
ridge_ref(formula, ridge_train, lambda)
ridge_reg(formula, ridge_train, lambda)
lm.ridge(y ~., ridge_train, lambda = 1.2121212)
library(mass)
library(MASS)
lm.ridge(y ~., ridge_train, lambda = 1.2121212)
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
install.packages("testthat")
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
data <- ridge_train
formula <- y ~. - 1
lambda <- 1.2121212
ridge_reg(formula, ridge_train, lambda)
ridge_reg(formula, ridge_train, lambda)
data <- ridge_train
formula <- y ~.
lambda <- 1.2121212
ridge_reg(formula, ridge_train, lambda)
lm.ridge(y ~. -1, lambda = 1.2121212, scale(ridge_train))
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
data <- scale(ridge_train)
formula <- y ~. -1
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
fit_ridge <- ridge_reg(formula , lambda, data)
fit_ridge <- ridge_reg(formula , data, lambda)
data <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(formula , data, lambda)
fit_ridge
ridge_reg <- function(formula, data, lambda){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
test()
devtools:
:
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test()
ridge_reg <- function(formula, lambda, data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
test()
test()
check()
devtools::install(build_vignettes = TRUE)
check()
?rmarkdown
install.packages("rmarkdown")
check()
devtools::use_vignette("my-vignette")
test()
ridge_train <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_train.csv")
ridge_test <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_test.csv")
ridge_train <- read.csv("/Users/CindyZhao/Documents/GitHub/bis557/data/ridge_train.csv")
ridge_test <- read.csv("/Users/CindyZhao/Documents/GitHub/bis557/data/ridge_test.csv")
ridge_reg <- function(formula, lambda, data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
test()
ridge_train <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_train.csv")
ridge_test <- read.csv("/Users/CindyZhao/Desktop/computational/ridge_test.csv")
ridge_reg <- function(formula, lambda,data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
test()
