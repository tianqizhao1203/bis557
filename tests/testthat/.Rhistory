#' Fit a linear model
#'
#' @description This function passes parameters to the lm function.
#' @param formula a formula
#' @param data a data.frame
#' @return An lm object
#' @examples
#' fit <- linear_model(Sepal.Length ~., iris)
#' summary(fit)
#' @export
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
devtools::test()
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
devtools::test()
devtools::test(linear-models.r)
devtools::test(linear_models)
devtools::test()
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
if (det(t(xm)%*%xm) == 0) {
beta <- "singular"
class(beta) <- c("lm")
return(beta[])
} else {
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
}
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
linear_model <- function(formula, data) {
xm <- model.matrix(formula,data)
yname <- paste(as.list(formula)[[2]])
ym <- as.matrix(data[,yname])
if (det(t(xm)%*%xm) == 0) {
beta <- "singular"
class(beta) <- c("lm")
return(beta[])
} else {
beta <- solve(t(xm)%*%xm)%*%t(xm)%*%ym
class(beta) <- c("lm")
colnames(beta) <- "coefficient"
return(beta[])
}
}
linear_model(Sepal.Length ~., iris)
linear_model(Sepal.Length ~., iris)
library(testthat)
context("Test the output of homework 1.")
test_that("The updated version of linear_model works.", {
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
expect_equivalent(fit_lm$coefficients, fit_linear_model$coefficients)
})
