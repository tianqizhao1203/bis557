pnorm(1.96)
g
library(gapminder)
library(ggplot2)
library(rbokeh)
data(iris)
g <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species, shape = Species))
+ geom_point()
p <- figure() %>% ly_points(Sepal.Length, Sepal.Width, data = iris, color = Species,
glyph = Species, hover = list(Sepal.Length, Sepal.Width))
install.packages("gapminder")
library(gapminder)
library(ggplot2)
library(rbokeh)
data(iris)
g <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species, shape = Species))
+ geom_point()
p <- figure() %>% ly_points(Sepal.Length, Sepal.Width, data = iris, color = Species,
glyph = Species, hover = list(Sepal.Length, Sepal.Width))
p
g
library(tidyr)
# population change over time
gapminder[gapminder$country == "Israel", ] %>% figure() %>%
gapminder %>% nest(-country)
a
# population change over time
gapminder[gapminder$country == "Israel", ] %>% figure() %>% ly_lines(x = year, y = population)
# population change over time
gapminder[gapminder$country == "Israel", ] %>% figure() %>%
ly_lines(x = year, y = pop)
gc <- gapminder %>% nest(-country) %>% mutate(first)year = map_dbl(data, function(x) min(x$year))
%>% mutate(first_year = map_dbl(data, function(x) min(x$year)))
gc <- gapminder %>% nest(-country) %>% mutate(first_year = map_dbl(data, function(x) min(x$year)))
library(purrr)
gc <- gapminder %>% nest(-country) %>% mutate(first_year = map_dbl(data, function(x) min(x$year)))
??mutate
?mutate
library(plyr)
gc <- gapminder %>% nest(-country) %>%
mutate(first_year = map_dbl(data, function(x) min(x$year)))
gc
library(trelliscope)
install.packages("trelliscope")
library(trelliscopejs)
install.packages("trelliscopejs")
?trelliscopejs
gc <- gapminder %>% nest(-country) %>%
mutate(first_year = map_dbl(data, function(x) min(x$year))) %>%
mutate(pop_fit = map(data, make_viz))
gc <- gapminder %>% nest(-country) %>%
mutate(first_year = map_dbl(data, function(x) min(x$year))) %>%
mutate(pop_fit = map(data, make_vis))
install.packages("trelliscopejs")
version
install.packages("trelliscopejs")
library(trelliscopejs)
pnorm(1.10)
1- pnorm(1.10)
2*(1- pnorm(1.10))
2*(1- pnorm(0.84))
2*(1- pnorm(1.56))
qnorm(0.015)
qnorm(0.85)
qnorm(0.01)
qnorm(0.93)
data(pima)
library(faraway)
install.packages("faraway")
library(faraway)
data(pima)
lambda <- seq(0,10,0.5)
form <- glucose ~ triceps + insulin + bmi
library(MASS)
fit <-  lm.ridge(form, data = pima, lambda = 2)
fit
lm.ridge
?lm.ridge
summary(fit)
fit
sd(fit)
names(fit)
ridge_reg <- function(formula, data, lambda){
mf <- model.frame(formula, data)
y <- mf[,1]
m <- as.matrix(mf[,-1])
m <- cbind(1, m)
colnames(m)[1] <- "(Intercept)"
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals/(svals^2 + lambda))
beta <- V %*% D %*% t(U) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
formula <- glucose ~ .
lambda <- seq(0,10,0.5)
ridge_reg(formula, pima, lambda)
m <- madel.matrix(formula, data)
m <- model.matrix(formula, data)
data = pima
formula <- glucose ~ .
lambda <- seq(0,10,0.5)
m <- model.matrix(formula, data)
m
names(formnula)
names(formula)
formula
formula[1]
formula[[]]
formula[[1]]
formula[[2]]
data[formula[[2]]]
yname <- formula[[2]]]
yname <- formula[[2]]
yname
data[yname]
data$yname
data[paste0(yname)]
?svd
m <- model.matrix(formula, data)
svd(m)
head(pima)
sd(pima)
sd(pima$pregnant)
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- data[paste0(yname)]
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/(svd_obj$d + lambda)) %*% svd_obj$u %*% y
lambda <- 2
beta <- svd_obj$v %*% diag(svd_obj$d/(svd_obj$d + lambda)) %*% svd_obj$u %*% y
formula <- Sepal.Length ~.
data = iris
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- data[paste0(yname)]
svd_obj <- svd(m)
lambda <- 2
beta <- svd_obj$v %*% diag(svd_obj$d/(svd_obj$d + lambda)) %*% svd_obj$u %*% y
formula <- Sepal.Length ~.
data = iris
data = pima
formula <- glucose ~ .
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- data[paste0(yname)]
svd_obj <- svd(m)
lambda <- 2
beta <- svd_obj$v %*% diag(svd_obj$d/(svd_obj$d + lambda)) %*% t(svd_obj$u) %*% y
y <- as.matrix(data[paste0(yname)])
beta <- svd_obj$v %*% diag(svd_obj$d/(svd_obj$d + lambda)) %*% t(svd_obj$u) %*% y
beta
rownames(beta) <- colnames(m)
beta
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
lm.ridge(glucose ~., pima)
data = pima
formula <- glucose ~ .
lm.ridge(glucose ~., pima, lambda = 2)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
fit <- lm.ridge(glucose ~., pima, lambda = 2)
ret - fit
dataframe(ret)
as.matrix(fit)
as.matrix(fit$coef)
ret - as.matrix(fit$coef)
fit
ret
svd(m)
beta1 <- svd_obj$v %*% diag(1/(svd_obj$d + lambda)) %*% diag(svd_obj$d) %*% t(svd_obj$u) %*% y
beta1
ridge_rep(formula, data, lambda)
lambda <- seq(0,10,0.5)
ridge_reg(formula, data, lambda)
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
beta <- list()
beta[[1]] <- 1
beta
data(ridge_train)
ridge_reg <- function(formula, lambda,data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
setwd("/Users/CindyZhao/Documents/GitHub/bis557/")
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
head(ridge_train)
t1 <- as.data.frame(ridge_train)
head(t1)
colMeans(t1)
class(t1$y.x1.x2.x3.x4)
class(t1$y)
data(ridge_train)
class(ridge_train$y.x1.x2.x3.x4) <- "numeric"
ridge_train_scale <- as.data.frame(scale(ridge_train))
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
class(ridge_train$y.x1.x2.x3.x4) <- "numeric"
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
ridge_train_scale$y
head(ridge_train)
head(ridge_train_scale)
haed(ridge_train)
head(ridge_train)
colnames(ridge_train) <- c("y", "x1", "x2", "x3", "x4")
colnames(ridge_train) <- c("y.x1.x2.x3.x4", "y", "x1", "x2", "x3", "x4")
dim(ridge_train)
data(ridge_train)
lm_patho <- read.csv("df.csv")
dir.create("../data")
save(lm_patho, file = "../data/lm_patho.rda")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
lm_patho <- read.csv("df.csv")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
dir.create("../data")
save(lm_patho, file = "../data/lm_patho.rda")
data(ridge_train)
ridge_reg <- function(formula, lambda,data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
ridge_test <- read.csv("ridge_test.csv")
ridge_test <- read.csv("ridge_test.csv")
#lm_patho <- read.csv("df.csv")
ridge_train <- read.csv("ridge_train.csv")
setwd("/Users/CindyZhao/Documents/GitHub/bis557/")
lm_patho <- read.csv("df.csv")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
dir.create("../data")
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
#dir.create("../data")
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
setwd("/Users/CindyZhao/Documents/GitHub/bis557/data-raw")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
#dir.create("../data")
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
data(ridge_train)
ridge_reg <- function(formula, lambda,data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
library(testthat)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
test()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test()
chec()
check()
version
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data(ridge_train)
lambda <- seq(0, log(100), 0.1)
lambda
ridge_reg(formula, lambda, data)
data(ridge_train)
ridge_reg <- function(formula, lambda,data){
m <- model.matrix(formula, data)
yname <- formula[[2]]
y <- as.matrix(data[paste0(yname)])
svd_obj <- svd(m)
beta <- svd_obj$v %*% diag(svd_obj$d/((svd_obj$d)^2 + lambda)) %*% t(svd_obj$u) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda)
class(ret) <- "ridge_reg"
ret
}
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
fit_rudge
fit_ridge
fit_ridge$coefficients %*% ridge_test$y
ridge_test
head(ridge_test)
head(ridge_test[-y])
head(ridge_test[,-1])
fit_ridge$coefficients %*% ridge_test[,-1]
fit_ridge$coefficients %*% as.matrix(ridge_test[,-1])
as.matrix(fit_ridge$coefficients) %*% ridge_test[,-1]
as.matrix(fit_ridge$coefficients)
formula <- y ~. -1
data <- ridge_train
install.packages("glmnet")
install.packages("Matrix")
install.packages("foreach")
install.packages("ggplot2")
lambda <- 1
ridge_reg(formula, lambda, data)
ridge_reg$coefficients
ridge_reg(formula, lambda, data)$coefficients
install.packages("ISLR")
b <- ridge_reg(formula, lambda, data)$coefficients
as.matrix(b)
as.matrix(b, nrow = 1, ncol = 4)
as.matrix(b, nrow = 1, ncol = 4)
c <- as.matrix(b)
c
t(c)
ridge_train[,-1] %*% b
as.matrix(ridge_train[,-1]) %*% b
a <- as.matrix(ridge_train[,-1]) %*% b
a - ridge_train[,1]
lambda <- seq(0, log(100), 0.1)
formula <- y ~. -1
mse_result <- matrix(NA, nrow = length(lambda))
mse_result
mse_result <- vector(NA, nrow = length(lambda))
mse_result <- vector(NA, length(lambda))
?vector
mse_result <- as.vector(NA, length(lambda))
mse_result <- matrix(NA, length(lambda))
lambda <- seq(0, log(100), 0.1)
formula <- y ~. -1
ridge_mse <- function(formula, lambda, ridge_test) {
y_predict <- as.matrix(ridge_test[,-1]) %*% as.matrix(ridge_reg(formula, lambda, ridge_train)$coefficients)
mse <- mean((y_predict - ridge_test[,1])^2)
mse
}
mse_result <- matrix(NA, length(lambda))
for (i in 1:lenght(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
for (i in 1:length(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
mse_result
library(ggplot2)
?ggplot2
ggplot(aes(x = lambda, y = mse_result)) + geom_line()
plot1 <- as.data.frame(cbind(lambda, mse_result))
plot1
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
lambda <- seq(0, log(1000), 0.1)
mse_result <- matrix(NA, length(lambda))
for (i in 1:length(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
plot1 <- as.data.frame(cbind(lambda, mse_result))
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
lambda <- seq(0, log(10000), 0.1)
mse_result <- matrix(NA, length(lambda))
for (i in 1:length(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
plot1 <- as.data.frame(cbind(lambda, mse_result))
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
lambda <- seq(0, 100, 0.1)
mse_result <- matrix(NA, length(lambda))
for (i in 1:length(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
plot1 <- as.data.frame(cbind(lambda, mse_result))
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
\newcommand{\trans}{{\scriptstyle T}}
\newcommand{\reals}{\mathbb R}
\newcommand{\argmin}{\mathop{\rm arg\,min}}
\let\hat\widehat
data(ridge_test)
ridge_mse <- function(formula, lambda, ridge_test) {
y_predict <- as.matrix(ridge_test[,-1]) %*% as.matrix(ridge_reg(formula, lambda, ridge_train)$coefficients)
mse <- mean((y_predict - ridge_test[,1])^2)
mse
}
mse_result <- matrix(NA, length(lambda))
for (i in 1:length(lambda)) {
mse_result[i,] <- ridge_mse(formula, lambda[i], ridge_test)
}
plot1 <- as.data.frame(cbind(lambda, mse_result))
ggplot(plot1, aes(x = lambda, y = mse_result)) + geom_line()
save(ridge_train, file = "../vignettes/ridge_train.rda")
save(ridge_test, file = "../vignettes/ridge_test.rda")
check()
install.packages("LaTex")
install.packages("LaTeX")
check()
test()
data(ridge_train)
test()
check()
test()
ckeck()
check()
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
test()
check()
library(mypackage)
install.packages("mypackage")
context("Test output")
library(testthat)
context("Test the output of homework 2.")
check()
library(testthat)
library(ggplot2)
context("Test the output of homework 2.")
test_that("Ridge regression works.", {
data(ridge_train)
lambda <- 1.2121212
ridge_train_scale <- as.data.frame(scale(ridge_train))
fit_ridge <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
expect_equivalent(fit_ridge$coef,
c(0.30854117, -0.27991787,  0.04860966, 0.03427351), tolerance = 1e-5)
})
test()
check()
check()
